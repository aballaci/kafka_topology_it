spring:
  cloud:
    stream:
      default: 
         producer: 
          useNativeEncoding: true
         consumer:  
          useNativeEncoding: true     
      bindings:
        input:
          destination: my-event
          content-type: application/*+avro
          group: group-1
          concurrency: 3
        output:
          destination: my-event
          content-type: application/*+avro
        splitStream-in-0:
          destination: my-event
          content-type: application/*+avro
          group: group-streams
        splitStream-out-0:
          destination: my-event-type1
          content-type: application/*+avro
      kafka:
          binder:
           brokers: localhost:31091
           producer-properties:
             key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
             value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
             schema.registry.url: http://localhost:32090
           consumer-properties:
             key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
             value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
             schema.registry.url: http://localhost:32090
             specific.avro.reader: true
          streams:
            binder:
              configuration:
                default.key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
                default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
                schema.registry.url: http://localhost:32090
              functions.splitStream.applicationId: TheStreamSplitter
              functions.splitStream.groupId: myGroupId


debug: false

                           